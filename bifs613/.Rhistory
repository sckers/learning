source('~/.active-rstudio-document')
runprgram()
runprogram()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
install.packages("swirl")
library("swirl")
swirl()
5 + 7
y <- 2 + 3
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- z - 1
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
bye()
help("apply")
library(swirl)
swirl()
goodbye()
??sidebarLayout
??submitButton
#shiny.rstudio.com/tutorial/written-tutorial/  - lessons 2 and 3
library(shiny)
ui <- fluidPage(
#App title
titlePanel("Insert our App title here",
#Text explaining app
h4("This app will create a phylogenetic tree based on your settings.\n
Choose your phylogenetic model and tree style from the dropdown\n
menus and use the slider to select your bootstraps setting.")
)
#Sidebar
sidebarLayout(
#Inputs
sidebarPanel(
#Drop-down for phylogenetic model
selectInput("model", "Phylogenetic Model", choices = list("Choose model..." = 1, "UPGMA" = 2, "Neighbor Joining" = 3, "Maximum Likelihood" = 4, "Maximum Parsimony" = 5, selected = 1)),
#Slider for bootstraps
sliderInput(inputId = "bootstraps", label = "Bootstraps", min = 1, max = 100, value = ?),
#Drop-down for tree style
selectInput("tree", "Tree Style", choices = list("Choose tree style..." = 1, "Circular" = 2, "Slanted" = 3, selected = 1))
#Go Button
actionButton("gobutton", "Go")
),
#Output panel
mainPanel(
plotOutput(outputId = #This will be a variable written in the server code
)
)
)
)
??sliderInput
#shiny.rstudio.com/tutorial/written-tutorial/  - lessons 2 and 3
library(shiny)
ui <- fluidPage(
#App title
titlePanel("Insert our App title here",
#Text explaining app
h4("This app will create a phylogenetic tree based on your settings.\n
Choose your phylogenetic model and tree style from the dropdown\n
menus and use the slider to select your bootstraps setting.")
)
#Sidebar
sidebarLayout(
#Inputs
sidebarPanel(
#Drop-down for phylogenetic model
selectInput("model", "Phylogenetic Model", choices = list("Choose model..." = 1, "UPGMA" = 2, "Neighbor Joining" = 3, "Maximum Likelihood" = 4, "Maximum Parsimony" = 5, selected = 1)),
#Slider for bootstraps
sliderInput(inputId = "bootstraps", label = "Bootstraps", min = 1, max = 100, value = 50),
#Drop-down for tree style
selectInput("tree", "Tree Style", choices = list("Choose tree style..." = 1, "Circular" = 2, "Slanted" = 3, selected = 1))
#Go Button
actionButton("gobutton", "Go")
),
#Output panel
mainPanel(
plotOutput(outputId = #This will be a variable written in the server code
)
)
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
# shiny.rstudio.com/tutorial/written-tutorial/  - lessons 2 and 3
library(shiny)
ui <- fluidPage(
# App title
titlePanel("Insert our App title here",
# Text explaining app
h4("This app will create a phylogenetic tree based on your settings.\n
Choose your phylogenetic model and tree style from the dropdown\n
menus and use the slider to select your bootstraps setting.")
)
# Sidebar
sidebarLayout(
# Inputs
sidebarPanel(
# Drop-down for phylogenetic model
selectInput("model", "Phylogenetic Model", choices = list("Choose model..." = 1, "UPGMA" = 2, "Neighbor Joining" = 3, "Maximum Likelihood" = 4, "Maximum Parsimony" = 5, selected = 1)),
# Slider for bootstraps
sliderInput(inputId = "bootstraps", label = "Bootstraps", min = 1, max = 100, value = 50),
# Drop-down for tree style
selectInput("tree", "Tree Style", choices = list("Choose tree style..." = 1, "Circular" = 2, "Slanted" = 3, selected = 1))
# Go Button
actionButton("gobutton", "Go")
),
# Output panel
mainPanel(
plotOutput(outputId = "plot")
)
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
# shiny.rstudio.com/tutorial/written-tutorial/  - lessons 2 and 3
library(shiny)
ui <- fluidPage(
# App title
titlePanel("Insert our App title here",
# Text explaining app
h4("This app will create a phylogenetic tree based on your settings.\n
Choose your phylogenetic model and tree style from the dropdown\n
menus and use the slider to select your bootstraps setting.")
),
# Sidebar
sidebarLayout(
# Inputs
sidebarPanel(
# Drop-down for phylogenetic model
selectInput("model", "Phylogenetic Model", choices = list("Choose model..." = 1, "UPGMA" = 2, "Neighbor Joining" = 3, "Maximum Likelihood" = 4, "Maximum Parsimony" = 5, selected = 1)),
# Slider for bootstraps
sliderInput(inputId = "bootstraps", label = "Bootstraps", min = 1, max = 100, value = 50),
# Drop-down for tree style
selectInput("tree", "Tree Style", choices = list("Choose tree style..." = 1, "Circular" = 2, "Slanted" = 3, selected = 1)),
# Go Button
actionButton("gobutton", "Go")
),
# Output panel
mainPanel(
plotOutput(outputId = "plot")
)
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
# shiny.rstudio.com/tutorial/written-tutorial/  - lessons 2 and 3
library(shiny)
ui <- fluidPage(
# App title
titlePanel("Insert our App title here",
# Text explaining app
h4("This app will create a phylogenetic tree based on your settings.\n
Choose your phylogenetic model and tree style from the dropdown\n
menus and use the slider to select your bootstraps setting.")
),
# Sidebar
sidebarLayout(
# Inputs
sidebarPanel(
# Drop-down for phylogenetic model
selectInput("model", "Phylogenetic Model", choices = list("Choose model..." = 1, "UPGMA" = 2, "Neighbor Joining" = 3, "Maximum Likelihood" = 4, "Maximum Parsimony" = 5, selected = 1)),
# Slider for bootstraps
sliderInput(inputId = "bootstraps", label = "Bootstraps", min = 1, max = 100, value = 50),
# Drop-down for tree style
selectInput("tree", "Tree Style", choices = list("Choose tree style..." = 1, "Circular" = 2, "Slanted" = 3, selected = 1)),
# Go Button
actionButton("gobutton", "Go")
),
# Output panel
mainPanel(
plotOutput(outputId = "plot")
)
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
library(shiny); runApp('C:/Users/scker/Downloads/app_v0.3.R')
install.packages(c("shinycssloaders", "shinydashboard"))
install.packages(c("shinycssloaders", "shinydashboard"))
install.packages(c("shinycssloaders", "shinydashboard"))
2+2
library(shiny); runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.5.R')
runApp('app_v0.5.R')
runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.5.R')
runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.5.R')
runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.5.R')
runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.5.R')
runApp('app_v0.5.R')
runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.5.R')
runApp('app_v0.5.R')
runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.5.R')
runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.5.R')
library(shiny); runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.6.R')
runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.4.5.R')
runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.6.R')
runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.5.R')
runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.6.R')
runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.6.R')
runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.6.R')
runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.6.R')
runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.6.R')
library(shiny); runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.6.R')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
library(shiny); runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.9.R')
library(shiny); runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.9.R')
library(shiny); runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.9.R')
package_version("shinydashboardPlus")
packageVersion("shinydashboardPlus")
install.packages(HMM)
install.packages("HMM")
# Question 3
library(HMM)
# Defining HMM
hmm = initHMM(c("F", "L"), c(1:6), c(0.5, 0.5), matrix(c(0.6, 0.5, 0.4, 0.5), 2),
matrix(c(0.167, 0.1, 0.167, 0.1, 0.167, 0.1, 0.167, 0.1, 0.167, 0.1, 0.167, 0.5), 1))
hmm
# Generate sample of rolls
observation = c(1:6, 6, 6, 1:4)
#Viterbi parsing
viterbi(hmm, observation)
c(1:6)
# Question 3
library(HMM)
# Defining HMM
hmm = initHMM(c("C", "N"), c("A", "T", "G", "C"), c(0.5, 0.5), matrix(c(0.55, 0.5, 0.45, 0.5), 2),
matrix(c(0.204, 0.195, 0.144, 0.186, 0.354, 0.334, 0.298, 0.285), 2))
hmm
# Generate sample of rolls
observation = c("C", "G", "C", "G", "T", "T", "C", "A", "T", "T", "C", "A", "A", "T", "G")
#Viterbi parsing
viterbi(hmm, observation)
DNAseq2 <- readDNAStringSet("seqeuence2_A2.txt")
nuc_freq2 <- oligonucleotideFrequency(DNAseq2, 1)
nuc_freq2
dinuc_freq2 <- dinucleotideFrequency(DNAseq2)
dinuc_freq2
setwd("C:/Sarah/Programming/R/bifs613")
DNAseq2 <- readDNAStringSet("seqeuence2_A2.txt")
nuc_freq2 <- oligonucleotideFrequency(DNAseq2, 1)
nuc_freq2
dinuc_freq2 <- dinucleotideFrequency(DNAseq2)
dinuc_freq2
library("Biostrings")
library("readr")
DNAseq1 <- readDNAStringSet("seqeuence1_A2.txt")
nuc_freq1 <- oligonucleotideFrequency(DNAseq1, 1)
nuc_freq1
dinuc_freq1 <- dinucleotideFrequency(DNAseq1)
dinuc_freq1
DNAseq2 <- readDNAStringSet("seqeuence2_A2.txt")
nuc_freq2 <- oligonucleotideFrequency(DNAseq2, 1)
nuc_freq2
dinuc_freq2 <- dinucleotideFrequency(DNAseq2)
dinuc_freq2
