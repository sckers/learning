source('~/.active-rstudio-document')
runprgram()
runprogram()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
install.packages("swirl")
library("swirl")
swirl()
5 + 7
y <- 2 + 3
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- z - 1
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
bye()
help("apply")
library(swirl)
swirl()
goodbye()
??sidebarLayout
??submitButton
#shiny.rstudio.com/tutorial/written-tutorial/  - lessons 2 and 3
library(shiny)
ui <- fluidPage(
#App title
titlePanel("Insert our App title here",
#Text explaining app
h4("This app will create a phylogenetic tree based on your settings.\n
Choose your phylogenetic model and tree style from the dropdown\n
menus and use the slider to select your bootstraps setting.")
)
#Sidebar
sidebarLayout(
#Inputs
sidebarPanel(
#Drop-down for phylogenetic model
selectInput("model", "Phylogenetic Model", choices = list("Choose model..." = 1, "UPGMA" = 2, "Neighbor Joining" = 3, "Maximum Likelihood" = 4, "Maximum Parsimony" = 5, selected = 1)),
#Slider for bootstraps
sliderInput(inputId = "bootstraps", label = "Bootstraps", min = 1, max = 100, value = ?),
#Drop-down for tree style
selectInput("tree", "Tree Style", choices = list("Choose tree style..." = 1, "Circular" = 2, "Slanted" = 3, selected = 1))
#Go Button
actionButton("gobutton", "Go")
),
#Output panel
mainPanel(
plotOutput(outputId = #This will be a variable written in the server code
)
)
)
)
??sliderInput
#shiny.rstudio.com/tutorial/written-tutorial/  - lessons 2 and 3
library(shiny)
ui <- fluidPage(
#App title
titlePanel("Insert our App title here",
#Text explaining app
h4("This app will create a phylogenetic tree based on your settings.\n
Choose your phylogenetic model and tree style from the dropdown\n
menus and use the slider to select your bootstraps setting.")
)
#Sidebar
sidebarLayout(
#Inputs
sidebarPanel(
#Drop-down for phylogenetic model
selectInput("model", "Phylogenetic Model", choices = list("Choose model..." = 1, "UPGMA" = 2, "Neighbor Joining" = 3, "Maximum Likelihood" = 4, "Maximum Parsimony" = 5, selected = 1)),
#Slider for bootstraps
sliderInput(inputId = "bootstraps", label = "Bootstraps", min = 1, max = 100, value = 50),
#Drop-down for tree style
selectInput("tree", "Tree Style", choices = list("Choose tree style..." = 1, "Circular" = 2, "Slanted" = 3, selected = 1))
#Go Button
actionButton("gobutton", "Go")
),
#Output panel
mainPanel(
plotOutput(outputId = #This will be a variable written in the server code
)
)
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
# shiny.rstudio.com/tutorial/written-tutorial/  - lessons 2 and 3
library(shiny)
ui <- fluidPage(
# App title
titlePanel("Insert our App title here",
# Text explaining app
h4("This app will create a phylogenetic tree based on your settings.\n
Choose your phylogenetic model and tree style from the dropdown\n
menus and use the slider to select your bootstraps setting.")
)
# Sidebar
sidebarLayout(
# Inputs
sidebarPanel(
# Drop-down for phylogenetic model
selectInput("model", "Phylogenetic Model", choices = list("Choose model..." = 1, "UPGMA" = 2, "Neighbor Joining" = 3, "Maximum Likelihood" = 4, "Maximum Parsimony" = 5, selected = 1)),
# Slider for bootstraps
sliderInput(inputId = "bootstraps", label = "Bootstraps", min = 1, max = 100, value = 50),
# Drop-down for tree style
selectInput("tree", "Tree Style", choices = list("Choose tree style..." = 1, "Circular" = 2, "Slanted" = 3, selected = 1))
# Go Button
actionButton("gobutton", "Go")
),
# Output panel
mainPanel(
plotOutput(outputId = "plot")
)
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
# shiny.rstudio.com/tutorial/written-tutorial/  - lessons 2 and 3
library(shiny)
ui <- fluidPage(
# App title
titlePanel("Insert our App title here",
# Text explaining app
h4("This app will create a phylogenetic tree based on your settings.\n
Choose your phylogenetic model and tree style from the dropdown\n
menus and use the slider to select your bootstraps setting.")
),
# Sidebar
sidebarLayout(
# Inputs
sidebarPanel(
# Drop-down for phylogenetic model
selectInput("model", "Phylogenetic Model", choices = list("Choose model..." = 1, "UPGMA" = 2, "Neighbor Joining" = 3, "Maximum Likelihood" = 4, "Maximum Parsimony" = 5, selected = 1)),
# Slider for bootstraps
sliderInput(inputId = "bootstraps", label = "Bootstraps", min = 1, max = 100, value = 50),
# Drop-down for tree style
selectInput("tree", "Tree Style", choices = list("Choose tree style..." = 1, "Circular" = 2, "Slanted" = 3, selected = 1)),
# Go Button
actionButton("gobutton", "Go")
),
# Output panel
mainPanel(
plotOutput(outputId = "plot")
)
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
# shiny.rstudio.com/tutorial/written-tutorial/  - lessons 2 and 3
library(shiny)
ui <- fluidPage(
# App title
titlePanel("Insert our App title here",
# Text explaining app
h4("This app will create a phylogenetic tree based on your settings.\n
Choose your phylogenetic model and tree style from the dropdown\n
menus and use the slider to select your bootstraps setting.")
),
# Sidebar
sidebarLayout(
# Inputs
sidebarPanel(
# Drop-down for phylogenetic model
selectInput("model", "Phylogenetic Model", choices = list("Choose model..." = 1, "UPGMA" = 2, "Neighbor Joining" = 3, "Maximum Likelihood" = 4, "Maximum Parsimony" = 5, selected = 1)),
# Slider for bootstraps
sliderInput(inputId = "bootstraps", label = "Bootstraps", min = 1, max = 100, value = 50),
# Drop-down for tree style
selectInput("tree", "Tree Style", choices = list("Choose tree style..." = 1, "Circular" = 2, "Slanted" = 3, selected = 1)),
# Go Button
actionButton("gobutton", "Go")
),
# Output panel
mainPanel(
plotOutput(outputId = "plot")
)
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
library(shiny); runApp('C:/Users/scker/Downloads/app_v0.3.R')
install.packages(c("shinycssloaders", "shinydashboard"))
install.packages(c("shinycssloaders", "shinydashboard"))
install.packages(c("shinycssloaders", "shinydashboard"))
2+2
library(shiny); runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.5.R')
runApp('app_v0.5.R')
runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.5.R')
runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.5.R')
runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.5.R')
runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.5.R')
runApp('app_v0.5.R')
runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.5.R')
runApp('app_v0.5.R')
runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.5.R')
runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.5.R')
library(shiny); runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.6.R')
runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.4.5.R')
runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.6.R')
runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.5.R')
runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.6.R')
runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.6.R')
runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.6.R')
runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.6.R')
runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.6.R')
library(shiny); runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.6.R')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
runApp('C:/Sarah/Programming/R/bifs613/shinytree')
library(shiny); runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.9.R')
library(shiny); runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.9.R')
library(shiny); runApp('C:/Sarah/Programming/R/bifs613/shinytree/app_v0.9.R')
package_version("shinydashboardPlus")
packageVersion("shinydashboardPlus")
install.packages(HMM)
install.packages("HMM")
# Question 3
library(HMM)
# Defining HMM
hmm = initHMM(c("F", "L"), c(1:6), c(0.5, 0.5), matrix(c(0.6, 0.5, 0.4, 0.5), 2),
matrix(c(0.167, 0.1, 0.167, 0.1, 0.167, 0.1, 0.167, 0.1, 0.167, 0.1, 0.167, 0.5), 1))
hmm
# Generate sample of rolls
observation = c(1:6, 6, 6, 1:4)
#Viterbi parsing
viterbi(hmm, observation)
c(1:6)
# Question 3
library(HMM)
# Defining HMM
hmm = initHMM(c("C", "N"), c("A", "T", "G", "C"), c(0.5, 0.5), matrix(c(0.55, 0.5, 0.45, 0.5), 2),
matrix(c(0.204, 0.195, 0.144, 0.186, 0.354, 0.334, 0.298, 0.285), 2))
hmm
# Generate sample of rolls
observation = c("C", "G", "C", "G", "T", "T", "C", "A", "T", "T", "C", "A", "A", "T", "G")
#Viterbi parsing
viterbi(hmm, observation)
# BIFS 617, Homework 5
# Sarah Kerscher
# Problem 1: Derive the weights for the provided sequences
# a. compute the pairwise distances between the sequences
seq <- ["ACTA", "ACTT", "CGTT", "AGAT"]
pairwiseDist(seq, dist_mat = getDNAMatrix())
install.packages("ape")
library(ape)
seq <- ("ACTA", "ACTT", "CGTT", "AGAT")
dist.dna(seq)
library(ape)
seq <- list("ACTA", "ACTT", "CGTT", "AGAT")
dist.dna(seq)
library(ape)
seq <- list("ACTA", "ACTT", "CGTT", "AGAT")
dist.dna(seq, model = "raw")
library(ape)
seq <- list("ACTA", "ACTT", "CGTT", "AGAT")
as.DNAbin(seq)
dist.dna(seq, model = "raw")
library(ape)
seq <- list("ACTA", "ACTT", "CGTT", "AGAT")
as.DNAbin(seq)
dist.dna(seq)
library(ape)
seq <- as.DNAbin(list("ACTA", "ACTT", "CGTT", "AGAT"))
dist.dna(seq)
library(ape)
seq <- as.DNAbin(list("ACTA", "ACTT", "CGTT", "AGAT"))
dist.dna(seq, model = "raw")
class(seq)
library(ape)
seq <- as.DNAbin(list("ACTA", "ACTT"))
dist.dna(seq, model = "raw")
library(ape)
seq <- as.DNAbin(list("ACTA", "ACTT"))
dist.dna(seq, model = "raw")
dist(seq)
library(ape)
seq <- as.DNAbin(list("ACTA", "ACTT", "CGTT", "AGAT"))
dist.dna(seq, model = "raw")
dist(seq)
image(seq)
library(ape)
seq <- as.DNAbin(list("ACTA", "ACTT", "CGTT", "AGAT"))
dist.dna(seq, model = "raw", pairwise.deletion = TRUE)
seq
seq <- list("ACTA", "ACTT", "CGTT", "AGAT")
seq
library(ape)
seq <- list("acta", "actt", "cgtt", "agat")
dist.dna(seq)
as.DNAbin(seq)
seq <- dna.dist(t(matrix({"acta", "actt", "cgtt", "agat"})))
seq <- dna.dist(t(matrix(c{"acta", "actt", "cgtt", "agat"})))
seq <- dna.dist(t(matrix(c("acta", "actt", "cgtt", "agat")))
)
library(ape)
seq <- dna.dist(t(matrix(c("acta", "actt", "cgtt", "agat"))))
seq <- dist.dna(t(matrix(c("acta", "actt", "cgtt", "agat"))))
seq
seq <- as.DNAbin(t(matrix(c("acta", "actt", "cgtt", "agat"))))
seq
library(ape)
seq <- as.DNAbin(t(strsplit(matrix(c("acta", "actt", "cgtt", "agat")), ""))
)
seq
library(ape)
seq <- as.DNAbin(t(strsplit(matrix(c("acta", "actt", "cgtt", "agat")), "")))
dist.dna(seq)
library(ape)
seq <- as.DNAbin(strsplit(matrix(c("acta", "actt", "cgtt", "agat")), ""))
dist.dna(seq)
seq <- strsplit(matrix(c("acta", "actt", "cgtt", "agat")), "")
seq
seq <- t(strsplit(matrix(c("acta", "actt", "cgtt", "agat")), ""))
seq
seq <- as.DNAbin(strsplit(matrix(c("acta", "actt", "cgtt", "agat")), ""))
seq
dist.dna(seq)
dist.dna(seq, model = "raw")
library(ape)
library(phangorn)
seq <- as.DNAbin(strsplit(matrix(c("acta", "actt", "cgtt", "agat")), ""))
dist_dna <- dist.dna(seq, model = "raw")
# b. apply UPGMA method to join sequences and the clusters
upgma(dist_dna)
# b. apply UPGMA method to join sequences and the clusters
tree <- upgma(dist_dna)
tree
plot(join_seq, main = "UPGMA")
plot(tree, main = "UPGMA")
setwd("C:/Sarah/Programming/R/bifs613/hw5")
seq1 <- "seqeuence1_A2.txt"
seq2 <- "seqeuence2_A2.txt"
seq1 <- read.dna("seqeuence1_A2.txt", format = "fasta")
seq2 <- read.dna("seqeuence2_A2.txt", format = "fasta")
seq1
GenBankSeqs <- ("NP_000509.1")
seqs <- read.GenBank(GenBankSeqs)
GenBankSeqs <- ("NM_000518.5")
seqs <- read.GenBank(GenBankSeqs)
seqs
GenBankSeqs <- ("NM_000518.5", "NM_205489.2", "NM_173917.2", "NM_001144841.1",
"NM_001164428.1", "NM_001164018.1", "NM_001201019.1",
"NM_001097648.1", "NM_001283367.1", "NM_001168847.1")
seqs <- read.GenBank(GenBankSeqs)
# write to a fasta file
write.FASTA(seqs, file = "new.fas")
GenBankSeqs <- (c("NM_000518.5", "NM_205489.2", "NM_173917.2", "NM_001144841.1",
"NM_001164428.1", "NM_001164018.1", "NM_001201019.1",
"NM_001097648.1", "NM_001283367.1", "NM_001168847.1"))
seqs <- read.GenBank(GenBankSeqs)
# write to a fasta file
write.FASTA(seqs, file = "new.fas")
GenBankSeqs <- (c("NM_000518.5", "NM_205489.2", "NM_173917.2", "NM_001144841.1",
"NM_001164428.1", "NM_001164018.1", "NM_001201019.1",
"NM_001097648.1", "NM_001283367.1", "NM_001168847.1"))
seqs <- read.GenBank(GenBankSeqs)
# write to a fasta file
write.FASTA(seqs, file = "new.fasta")
# Run clustalw
system(paste("C:\Program Files (x86)\ClustalW2\clustalw2.exe", "new.fasta"))
# Run clustalw
system(paste("C:\\Program Files (x86)\\ClustalW2\\clustalw2.exe", "new.fasta"))
# Run clustalw
system(paste('"C:\\Program Files (x86)\\ClustalW2\\clustalw2.exe" new.fasta'))
seqAln <- read.dna("new.aln", format = "clustal")
# Create tree using neighbor-joining method
nj_dist <- dist.dna(seqAln)
tree <- nj(nj_dist)
# Plot the tree
plot(tree, main = "Phylogenetic Tree", sub = "Using the Neighbor-Joining Method")
